name: Build and Release SimpleDoubleClickFix (C++)

on:
  push:
    tags:
      - 'v*' # Trigger on version tags (e.g., v1.0.0)
  workflow_dispatch: # Allows manual triggering

permissions:
  contents: write # Required to create releases, upload assets, and push tags

jobs:
  build:
    runs-on: windows-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      # // ... (e.g., with: { fetch-depth: 0 } if full history is needed for other reasons)

    - name: Setup MSBuild
      uses: microsoft/setup-msbuild@v2
      # // ...

    - name: Get current date for Release Name
      id: release_date
      run: echo "formatted_date=$(Get-Date -Format 'yyyy-MM-dd')" >> $env:GITHUB_OUTPUT
      shell: pwsh

    - name: Determine Release Tag and Properties
      id: release_props
      shell: pwsh
      run: |
        # read the raw ref
        $ref = $env:GITHUB_REF                # e.g. "refs/heads/master" or "refs/tags/v1.0.0"
        $refName = $ref.Split('/')[-1]        # e.g. "master" or "v1.0.0"
        $isTag    = $ref.StartsWith('refs/tags/')
        $isBranch = $ref.StartsWith('refs/heads/')

        $finalTag       = $refName
        $createNewTag   = $false
        $isPrerelease   = $refName.Contains('-')  # any tag with "-" ⇒ prerelease

        if ('${{ github.event_name }}' -eq 'workflow_dispatch') {
          if (-not $isTag) {
            # manual dispatch on a branch ⇒ create a dev-timestamp tag
            $timestamp     = Get-Date -Format 'yyyyMMdd-HHmmss'
            $finalTag       = "dev-$timestamp"
            $createNewTag   = $true
            $isPrerelease   = $false
            Write-Host "Manual dispatch on branch. Will create tag: $finalTag"
          }
          else {
            Write-Host "Manual dispatch on tag $refName. Using existing tag."
          }
        }
        elseif ('${{ github.event_name }}' -eq 'push' -and $isTag) {
          Write-Host "Push of tag $refName. Using that tag."
        }
        else {
          # This line is fine as is, as ${{ github.event_name }} is within a PowerShell double-quoted string
          Write-Host "Event ${{ github.event_name }} on $ref. Not a tag push or manual dispatch. Using tag $finalTag."
        }

        # export for later steps
        echo "final_tag_name=$finalTag"        >> $env:GITHUB_OUTPUT
        echo "create_new_git_tag=$createNewTag" >> $env:GITHUB_OUTPUT
        echo "is_prerelease=$isPrerelease"     >> $env:GITHUB_OUTPUT

    - name: Build C++ Project
      run: msbuild SimpleDoubleClickFix\SimpleDoubleClickFix.vcxproj /p:Configuration=Release /p:Platform=x64
      shell: pwsh

    - name: Stage Binaries
      run: |
        mkdir staging
        Copy-Item -Path SimpleDoubleClickFix\x64\Release\SimpleDoubleClickFix.exe -Destination staging\
      shell: pwsh

    - name: Create ZIP Archive
      run: Compress-Archive -Path staging\* -DestinationPath SimpleDoubleClickFix.zip
      shell: pwsh

    - name: Upload Build Artifact
      uses: actions/upload-artifact@v4
      with:
        name: SimpleDoubleClickFix-${{ steps.release_props.outputs.final_tag_name }} # Artifact name uses determined tag
        path: ./SimpleDoubleClickFix.zip
        retention-days: 7

    - name: Create and Push Git Tag (if new)
      if: steps.release_props.outputs.create_new_git_tag == 'true'
      run: |
        $new_tag = "${{ steps.release_props.outputs.final_tag_name }}"
        git config user.name "github-actions[bot]"
        git config user.email "github-actions[bot]@users.noreply.github.com"
        Write-Host "Creating and pushing new git tag: $new_tag for commit ${{ github.sha }}"
        git tag $new_tag "${{ github.sha }}"
        git push origin $new_tag
      shell: pwsh

    - name: Create GitHub Release
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ steps.release_props.outputs.final_tag_name }}
        release_name: Release ${{ steps.release_props.outputs.final_tag_name }} (${{ steps.release_date.outputs.formatted_date }})
        body: |
          Release notes for SimpleDoubleClickFix.

          Download the `SimpleDoubleClickFix.zip` file, extract it, and launch `SimpleDoubleClickFix.exe`.
          This will open a console window; the fix is active as long as this window remains open.
          The program prints active thresholds (e.g., for Left Mouse Button) to the console on startup.
          To stop the program, close the console window or press Ctrl+C in it.

          Windows only. This is a native C++ application and does not require a .NET runtime.
          It may require the Microsoft Visual C++ Redistributable for Visual Studio 2015-2022.
          If needed, you can usually download it from Microsoft's official website.
        draft: false
        prerelease: ${{ steps.release_props.outputs.is_prerelease == 'true' }}

    - name: Upload Release Asset
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ./SimpleDoubleClickFix.zip
        asset_name: SimpleDoubleClickFix.zip # This is the filename in the release assets.
        asset_content_type: application/zip